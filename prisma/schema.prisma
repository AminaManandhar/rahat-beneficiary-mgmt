// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beneficiary {
  id        Int    @id @default(autoincrement()) @db.Integer()
  uuid      String @unique @default(uuid()) @db.Uuid()
  custom_id String @unique

  firstName       String
  lastName        String
  gender          Gender         @default(Unknown)
  wallet_address  String?
  birth_date      DateTime?
  location        String?
  latitude        Float?
  longitude       Float?
  phone           String?
  email           String?
  extras          Json?          @db.JsonB()
  notes           String?
  banked_status   BankedStatus   @default(UNKNOWN)
  internet_status InternetStatus @default(UNKNOWN)
  phone_status    PhoneStatus    @default(UNKNOWN)
  created_at      DateTime       @default(now())
  updated_at      DateTime?      @updatedAt()

  beneficiaries_group BeneficiaryGroup[]
  beneficiary_source  BeneficiarySource[]
  TargetResult        TargetResult[]

  @@map("tbl_beneficiaries")
}

model Source {
  id                 Int                 @id @default(autoincrement()) @db.Integer()
  uuid               String              @unique @default(uuid()) @db.Uuid()
  name               String
  isImported         Boolean             @default(false)
  beneficiary_source BeneficiarySource[]
  details            Json                @db.JsonB()
  field_mapping      Json
  created_at         DateTime            @default(now())
  updated_at         DateTime?           @updatedAt()

  @@map("tbl_source")
}

model BeneficiarySource {
  id             Int         @id @default(autoincrement()) @db.Integer()
  source         Source      @relation(fields: [source_id], references: [id])
  source_id      Int         @db.Integer()
  beneficiary    Beneficiary @relation(fields: [beneficiary_id], references: [id])
  beneficiary_id Int         @db.Integer()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  @@map("tbl_beneficiariessource")
}

model FieldDefinition {
  id             Int       @id @default(autoincrement()) @db.Integer()
  name           String    @unique
  field_type     FieldType
  field_populate Json? // { data: "john doe" } Or { data: [{id:1, label:'Green'}] }
  is_active      Boolean   @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  @@map("tbl_field_definition")
}

model Group {
  id                  Int                @id @default(autoincrement()) @db.Integer()
  name                String             @unique
  beneficiaries_group BeneficiaryGroup[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  @@map("tbl_groups")
}

model BeneficiaryGroup {
  id            Int         @id @default(autoincrement()) @db.Integer()
  beneficiary   Beneficiary @relation(fields: [beneficary_id], references: [id])
  beneficary_id Int         @db.Integer()
  group         Group       @relation(fields: [group_id], references: [id])
  group_id      Int         @db.Integer()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  @@unique([beneficary_id, group_id])
  @@map("tbl_beneficiariesgroups")
}

model TargetQuery {
  id            Int               @id @default(autoincrement()) @db.Integer()
  uuid          String            @unique @default(uuid()) @db.Uuid()
  label         String?
  filterOptions Json              @db.JsonB()
  status        TargetQueryStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt()
  TargetResult  TargetResult[]

  @@map("tbl_target_query")
}

model TargetResult {
  id           Int         @id @default(autoincrement()) @db.Integer()
  beneficiary  Beneficiary @relation(fields: [benef_uuid], references: [uuid])
  benef_uuid   String      @db.Uuid()
  target_query TargetQuery @relation(fields: [target_uuid], references: [uuid])
  target_uuid  String      @db.Uuid()
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt()

  @@map("tbl_target_result")
}

enum TargetQueryStatus {
  PENDING
  COMPLETED
}

enum BankedStatus {
  UNKNOWN
  UNBANKED
  BANKED
  UNDER_BANKED
}

enum InternetStatus {
  UNKNOWN
  NO_INTERNET
  HOME_INTERNET
  MOBILE_INTERNET
}

enum PhoneStatus {
  UNKNOWN
  NO_PHONE
  FEATURE_PHONE
  SMART_PHONE
}

enum Gender {
  Male
  Female
  Other
  Unknown
}

enum AuthType {
  Email
  Phone
  Wallet
}

enum FieldType {
  Checkbox
  Dropdown
  Number
  Password
  Radio
  Text
  Textarea
}

// ============User Management Schema============

model Role {
  id        Int       @unique @default(autoincrement())
  name      String    @unique @db.VarChar()
  isSystem  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  Permission Permission[]
  User       User[]

  @@map("roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  role       Role    @relation(fields: [roleId], references: [id])
  roleId     Int     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("permissions")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authAddress String   @unique
  authType    AuthType @default(Email)
  firstName   String
  lastName    String
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      Int      @db.Integer()
  otp         String?

  @@map("users")
}

// ============End User Management Schema===========

// ============Settings Schema===========

model Settings {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  value          Json
  requiredFields String[]
  isReadOnly     Boolean  @default(false) // true? Dont allow Write from API
  isPrivate      Boolean  @default(true) // true?  Dont allow Read from API
}

// ============End Settings Schema===========
